// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getChrScore_scored_k
Rcpp::NumericVector getChrScore_scored_k(std::vector<std::string> kmers, std::vector<double> scores, std::string chrSeq, int kmerLen);
RcppExport SEXP _MIcalc_getChrScore_scored_k(SEXP kmersSEXP, SEXP scoresSEXP, SEXP chrSeqSEXP, SEXP kmerLenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type kmers(kmersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< std::string >::type chrSeq(chrSeqSEXP);
    Rcpp::traits::input_parameter< int >::type kmerLen(kmerLenSEXP);
    rcpp_result_gen = Rcpp::wrap(getChrScore_scored_k(kmers, scores, chrSeq, kmerLen));
    return rcpp_result_gen;
END_RCPP
}
// getChrScore
Rcpp::IntegerVector getChrScore(std::vector< std::string > topKmers, std::string chrSeq);
RcppExport SEXP _MIcalc_getChrScore(SEXP topKmersSEXP, SEXP chrSeqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type topKmers(topKmersSEXP);
    Rcpp::traits::input_parameter< std::string >::type chrSeq(chrSeqSEXP);
    rcpp_result_gen = Rcpp::wrap(getChrScore(topKmers, chrSeq));
    return rcpp_result_gen;
END_RCPP
}
// revComp
std::string revComp(std::string seq);
RcppExport SEXP _MIcalc_revComp(SEXP seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    rcpp_result_gen = Rcpp::wrap(revComp(seq));
    return rcpp_result_gen;
END_RCPP
}
// fast_factor
SEXP fast_factor(SEXP x);
RcppExport SEXP _MIcalc_fast_factor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor(x));
    return rcpp_result_gen;
END_RCPP
}
// assign_k_to_PWMs
SEXP assign_k_to_PWMs(std::vector<std::string> kmers, Rcpp::List motifs, std::vector<std::string> motifNames, double threshold);
RcppExport SEXP _MIcalc_assign_k_to_PWMs(SEXP kmersSEXP, SEXP motifsSEXP, SEXP motifNamesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type kmers(kmersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type motifs(motifsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type motifNames(motifNamesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_k_to_PWMs(kmers, motifs, motifNames, threshold));
    return rcpp_result_gen;
END_RCPP
}
// kmerCnt
SEXP kmerCnt(std::vector< std::string > strings, int k, bool collapse, bool diffLen, bool asDf);
RcppExport SEXP _MIcalc_kmerCnt(SEXP stringsSEXP, SEXP kSEXP, SEXP collapseSEXP, SEXP diffLenSEXP, SEXP asDfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type collapse(collapseSEXP);
    Rcpp::traits::input_parameter< bool >::type diffLen(diffLenSEXP);
    Rcpp::traits::input_parameter< bool >::type asDf(asDfSEXP);
    rcpp_result_gen = Rcpp::wrap(kmerCnt(strings, k, collapse, diffLen, asDf));
    return rcpp_result_gen;
END_RCPP
}
// kmerCnt_allgap
SEXP kmerCnt_allgap(std::vector< std::string > strings, int k, int maxGap, bool asDf, bool diffLen, int minGap);
RcppExport SEXP _MIcalc_kmerCnt_allgap(SEXP stringsSEXP, SEXP kSEXP, SEXP maxGapSEXP, SEXP asDfSEXP, SEXP diffLenSEXP, SEXP minGapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxGap(maxGapSEXP);
    Rcpp::traits::input_parameter< bool >::type asDf(asDfSEXP);
    Rcpp::traits::input_parameter< bool >::type diffLen(diffLenSEXP);
    Rcpp::traits::input_parameter< int >::type minGap(minGapSEXP);
    rcpp_result_gen = Rcpp::wrap(kmerCnt_allgap(strings, k, maxGap, asDf, diffLen, minGap));
    return rcpp_result_gen;
END_RCPP
}
// kmerCntBit
SEXP kmerCntBit(std::vector<std::string> strings, int k, bool diffLen, bool collapse, bool asDf, bool all_possible_k, int pseudo);
RcppExport SEXP _MIcalc_kmerCntBit(SEXP stringsSEXP, SEXP kSEXP, SEXP diffLenSEXP, SEXP collapseSEXP, SEXP asDfSEXP, SEXP all_possible_kSEXP, SEXP pseudoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type diffLen(diffLenSEXP);
    Rcpp::traits::input_parameter< bool >::type collapse(collapseSEXP);
    Rcpp::traits::input_parameter< bool >::type asDf(asDfSEXP);
    Rcpp::traits::input_parameter< bool >::type all_possible_k(all_possible_kSEXP);
    Rcpp::traits::input_parameter< int >::type pseudo(pseudoSEXP);
    rcpp_result_gen = Rcpp::wrap(kmerCntBit(strings, k, diffLen, collapse, asDf, all_possible_k, pseudo));
    return rcpp_result_gen;
END_RCPP
}
// gkmerCntBit
SEXP gkmerCntBit(std::vector<std::string> strings, int gapNo, int k, IntegerVector gapMins, IntegerVector gapMaxs, int pseudo, bool diffLen, bool posInfo, bool all_possible_k);
RcppExport SEXP _MIcalc_gkmerCntBit(SEXP stringsSEXP, SEXP gapNoSEXP, SEXP kSEXP, SEXP gapMinsSEXP, SEXP gapMaxsSEXP, SEXP pseudoSEXP, SEXP diffLenSEXP, SEXP posInfoSEXP, SEXP all_possible_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< int >::type gapNo(gapNoSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gapMins(gapMinsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gapMaxs(gapMaxsSEXP);
    Rcpp::traits::input_parameter< int >::type pseudo(pseudoSEXP);
    Rcpp::traits::input_parameter< bool >::type diffLen(diffLenSEXP);
    Rcpp::traits::input_parameter< bool >::type posInfo(posInfoSEXP);
    Rcpp::traits::input_parameter< bool >::type all_possible_k(all_possible_kSEXP);
    rcpp_result_gen = Rcpp::wrap(gkmerCntBit(strings, gapNo, k, gapMins, gapMaxs, pseudo, diffLen, posInfo, all_possible_k));
    return rcpp_result_gen;
END_RCPP
}
// scoring
SEXP scoring(std::vector<std::string> strings, arma::cube scoreCube, int gapNo, int k, IntegerVector gapMins, IntegerVector gapMaxs, int pseudo, bool diffLen, bool posInfo);
RcppExport SEXP _MIcalc_scoring(SEXP stringsSEXP, SEXP scoreCubeSEXP, SEXP gapNoSEXP, SEXP kSEXP, SEXP gapMinsSEXP, SEXP gapMaxsSEXP, SEXP pseudoSEXP, SEXP diffLenSEXP, SEXP posInfoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type scoreCube(scoreCubeSEXP);
    Rcpp::traits::input_parameter< int >::type gapNo(gapNoSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gapMins(gapMinsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gapMaxs(gapMaxsSEXP);
    Rcpp::traits::input_parameter< int >::type pseudo(pseudoSEXP);
    Rcpp::traits::input_parameter< bool >::type diffLen(diffLenSEXP);
    Rcpp::traits::input_parameter< bool >::type posInfo(posInfoSEXP);
    rcpp_result_gen = Rcpp::wrap(scoring(strings, scoreCube, gapNo, k, gapMins, gapMaxs, pseudo, diffLen, posInfo));
    return rcpp_result_gen;
END_RCPP
}
// matRevComp
NumericMatrix matRevComp(NumericMatrix seqs);
RcppExport SEXP _MIcalc_matRevComp(SEXP seqsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type seqs(seqsSEXP);
    rcpp_result_gen = Rcpp::wrap(matRevComp(seqs));
    return rcpp_result_gen;
END_RCPP
}
// pfm_from_seed_notUsed
NumericMatrix pfm_from_seed_notUsed(std::vector<std::string> seqs, std::string seed1, int gapLen, std::string seed2, NumericVector seed1_start, int flankLen, bool all_start_with_specified_gap);
RcppExport SEXP _MIcalc_pfm_from_seed_notUsed(SEXP seqsSEXP, SEXP seed1SEXP, SEXP gapLenSEXP, SEXP seed2SEXP, SEXP seed1_startSEXP, SEXP flankLenSEXP, SEXP all_start_with_specified_gapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< std::string >::type seed1(seed1SEXP);
    Rcpp::traits::input_parameter< int >::type gapLen(gapLenSEXP);
    Rcpp::traits::input_parameter< std::string >::type seed2(seed2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed1_start(seed1_startSEXP);
    Rcpp::traits::input_parameter< int >::type flankLen(flankLenSEXP);
    Rcpp::traits::input_parameter< bool >::type all_start_with_specified_gap(all_start_with_specified_gapSEXP);
    rcpp_result_gen = Rcpp::wrap(pfm_from_seed_notUsed(seqs, seed1, gapLen, seed2, seed1_start, flankLen, all_start_with_specified_gap));
    return rcpp_result_gen;
END_RCPP
}
// seqFregments
CharacterMatrix seqFregments(std::vector<std::string> strings, int k);
RcppExport SEXP _MIcalc_seqFregments(SEXP stringsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(seqFregments(strings, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MIcalc_getChrScore_scored_k", (DL_FUNC) &_MIcalc_getChrScore_scored_k, 4},
    {"_MIcalc_getChrScore", (DL_FUNC) &_MIcalc_getChrScore, 2},
    {"_MIcalc_revComp", (DL_FUNC) &_MIcalc_revComp, 1},
    {"_MIcalc_fast_factor", (DL_FUNC) &_MIcalc_fast_factor, 1},
    {"_MIcalc_assign_k_to_PWMs", (DL_FUNC) &_MIcalc_assign_k_to_PWMs, 4},
    {"_MIcalc_kmerCnt", (DL_FUNC) &_MIcalc_kmerCnt, 5},
    {"_MIcalc_kmerCnt_allgap", (DL_FUNC) &_MIcalc_kmerCnt_allgap, 6},
    {"_MIcalc_kmerCntBit", (DL_FUNC) &_MIcalc_kmerCntBit, 7},
    {"_MIcalc_gkmerCntBit", (DL_FUNC) &_MIcalc_gkmerCntBit, 9},
    {"_MIcalc_scoring", (DL_FUNC) &_MIcalc_scoring, 9},
    {"_MIcalc_matRevComp", (DL_FUNC) &_MIcalc_matRevComp, 1},
    {"_MIcalc_pfm_from_seed_notUsed", (DL_FUNC) &_MIcalc_pfm_from_seed_notUsed, 7},
    {"_MIcalc_seqFregments", (DL_FUNC) &_MIcalc_seqFregments, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_MIcalc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
